{"instruction": "Write Python code based on the request.", "input": "Write a Python function to add two numbers.", "output": "def add(a, b):\n    return a + b"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to check if a number is even.", "output": "def is_even(n):\n    return n % 2 == 0"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python program to print Fibonacci sequence up to n terms.", "output": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        print(a)\n        a, b = b, a + b"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to calculate factorial of a number.", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python program to reverse a string.", "output": "def reverse_string(s):\n    return s[::-1]"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to check if a string is a palindrome.", "output": "def is_palindrome(s):\n    return s == s[::-1]"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to calculate the square root of a number.", "output": "def square_root(n):\n    return n ** 0.5"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to find the maximum element in a list.", "output": "def find_max(lst):\n    return max(lst)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to remove duplicates from a list.", "output": "def remove_duplicates(lst):\n    return list(set(lst))"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to sort a list in ascending order.", "output": "def sort_list(lst):\n    return sorted(lst)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to count the vowels in a string.", "output": "def count_vowels(s):\n    return sum(1 for c in s.lower() if c in 'aeiou')"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to merge two dictionaries.", "output": "def merge_dicts(d1, d2):\n    return {**d1, **d2}"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to check if a number is prime.", "output": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to calculate the length of a string without using len().", "output": "def custom_len(s):\n    count = 0\n    for _ in s:\n        count += 1\n    return count"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to find the GCD of two numbers.", "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to reverse the words in a sentence.", "output": "def reverse_words(sentence):\n    return ' '.join(sentence.split()[::-1])"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to check if a number is even.", "output": "def is_even(n):\n    return n % 2 == 0"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to calculate the factorial of a number.", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to convert Celsius to Fahrenheit.", "output": "def celsius_to_fahrenheit(c):\n    return (c * 9/5) + 32"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to count the frequency of each character in a string.", "output": "def char_frequency(s):\n    freq = {}\n    for char in s:\n        freq[char] = freq.get(char, 0) + 1\n    return freq"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to check if a string is anagram of another.", "output": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to flatten a nested list.", "output": "def flatten(lst):\n    result = []\n    for i in lst:\n        if isinstance(i, list):\n            result.extend(flatten(i))\n        else:\n            result.append(i)\n    return result"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to find the second largest number in a list.", "output": "def second_largest(lst):\n    unique = list(set(lst))\n    unique.sort()\n    return unique[-2] if len(unique) >= 2 else None"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to convert a number to binary.", "output": "def to_binary(n):\n    return bin(n)[2:]"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to check if all elements in a list are unique.", "output": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to remove duplicates from a list.", "output": "def remove_duplicates(lst):\n    return list(set(lst))"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to check if a string is a palindrome.", "output": "def is_palindrome(s):\n    return s == s[::-1]"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to find the maximum value in a list.", "output": "def find_max(lst):\n    return max(lst)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to merge two dictionaries.", "output": "def merge_dicts(d1, d2):\n    return {**d1, **d2}"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to calculate the sum of digits of a number.", "output": "def sum_of_digits(n):\n    return sum(int(d) for d in str(n))"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to count the number of vowels in a string.", "output": "def count_vowels(s):\n    return sum(1 for c in s.lower() if c in 'aeiou')"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to calculate the nth Fibonacci number.", "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to capitalize the first letter of each word in a string.", "output": "def capitalize_words(s):\n    return ' '.join(word.capitalize() for word in s.split())"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to check if a number is prime.", "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to generate a list of squares from 1 to n.", "output": "def generate_squares(n):\n    return [i**2 for i in range(1, n+1)]"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to add two numbers.", "output": "\ndef add(a, b):\n    return a + b"}
{"instruction": "Write Python code based on the request.", "input": "Create a Python function that adds two numbers.", "output": "\ndef add_numbers(x, y):\n    return x + y"}
{"instruction": "Write Python code based on the request.", "input": "How do I sum two integers in Python?", "output": "\ndef sum_integers(a, b):\n    return a + b"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python program to read a file and print its content.", "output": "with open('file.txt', 'r') as file:\n    content = file.read()\n    print(content)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python program to find the maximum number in a list.", "output": "numbers = [10, 20, 45, 3]\nmax_num = max(numbers)\nprint(max_num)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python program to count the vowels in a string.", "output": "def count_vowels(s):\n    return sum(1 for char in s.lower() if char in 'aeiou')\n\nprint(count_vowels('Hello World'))"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python program to sort a list of numbers.", "output": "numbers = [5, 2, 9, 1]\nnumbers.sort()\nprint(numbers)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python program to check if a number is prime.", "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(7))"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python program to print all numbers from 1 to 10.", "output": "for i in range(1, 11):\n    print(i)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python program to check if a number is positive, negative, or zero.", "output": "def check_number(n):\n    if n > 0:\n        print(\"Positive\")\n    elif n < 0:\n        print(\"Negative\")\n    else:\n        print(\"Zero\")"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to sum all elements in a list.", "output": "def sum_list(lst):\n    return sum(lst)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python program using list comprehension to get squares of numbers from 1 to 10.", "output": "squares = [x**2 for x in range(1, 11)]\nprint(squares)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to handle division by zero using try-except.", "output": "def safe_divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return \"Cannot divide by zero\""}
{"instruction": "Write Python code based on the request.", "input": "Write a Python class representing a simple Dog.", "output": "class Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def bark(self):\n        print(f\"{self.name} says woof!\")"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python script to read contents of a file called data.txt.", "output": "with open('data.txt', 'r') as file:\n    content = file.read()\n    print(content)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python script that fetches data from a URL using the requests library.", "output": "import requests\nresponse = requests.get('https://api.example.com')\nprint(response.text)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python program using NumPy to create a 3x3 identity matrix.", "output": "import numpy as np\nidentity_matrix = np.eye(3)\nprint(identity_matrix)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python script using pandas to read a CSV file.", "output": "import pandas as pd\ndf = pd.read_csv('data.csv')\nprint(df.head())"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python for loop to print numbers from 1 to 5.", "output": "for i in range(1, 6):\n    print(i)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python program using if-else to check if a number is positive.", "output": "num = 5\nif num > 0:\n    print(\"Positive\")\nelse:\n    print(\"Non-positive\")"}
{"instruction": "Write Python code based on the request.", "input": "Write a list comprehension to get squares of numbers from 1 to 5.", "output": "squares = [x**2 for x in range(1, 6)]\nprint(squares)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python try-except block to handle division by zero.", "output": "try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python program to read a text file and print its contents.", "output": "with open('file.txt', 'r') as file:\n    content = file.read()\n    print(content)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python class representing a Car with brand and year.", "output": "class Car:\n    def __init__(self, brand, year):\n        self.brand = brand\n        self.year = year\n\n    def display(self):\n        print(f\"{self.brand} - {self.year}\")"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function using numpy to create an array of zeros.", "output": "import numpy as np\nzeros_array = np.zeros((3, 3))\nprint(zeros_array)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python program using pandas to create a DataFrame.", "output": "import pandas as pd\ndata = {'name': ['Alice', 'Bob'], 'age': [25, 30]}\ndf = pd.DataFrame(data)\nprint(df)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python function to sort a list of numbers.", "output": "def sort_list(numbers):\n    return sorted(numbers)"}
{"instruction": "Write Python code based on the request.", "input": "Write a Python while loop to count from 1 to 3.", "output": "i = 1\nwhile i <= 3:\n    print(i)\n    i += 1"}
{"instruction": "Write Python code based on the request.", "input": "Add two numbers using Python function.", "output": "def add(a, b):\n    return a + b"}
{"instruction": "Write Python code based on the request.", "input": "Create a method in Python to sum two integers.", "output": "def add(a, b):\n    return a + b"}
{"instruction": "Write Python code based on the request.", "input": "How can I write a function to return the sum of two numbers?", "output": "def add(a, b):\n    return a + b"}
